openapi: 3.0.0
info:
  title: "무한로딩 게시판 API"
  description: "Spring Boot와 React로 제작된 '무한로딩' 게시판 프로젝트의 REST API 명세서입니다."
  version: "1.0.0"
servers:
  - url: "http://localhost:8080"
    description: "로컬 개발 서버"

# ===============================================================
#  Reusable Components
# ===============================================================
components:
  schemas:
    # -----------------------------------------------------------
    #  Request Schemas
    # -----------------------------------------------------------
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          description: "사용자 이름"
          example: "testuser"
        password:
          type: string
          description: "비밀번호"
          example: "password123"
      required:
        - username
        - password

    LoginRequest:
      type: object
      properties:
        username:
          type: string
          description: "사용자 이름"
          example: "testuser"
        password:
          type: string
          description: "비밀번호"
          example: "password123"
      required:
        - username
        - password

    PostRequest:
      type: object
      properties:
        title:
          type: string
          description: "게시글 제목"
          example: "새로운 게시글 제목입니다."
        content:
          type: string
          description: "게시글 내용 (마크다운 형식)"
          example: "## 안녕하세요\n\n여기에 내용을 입력하세요."
      required:
        - title
        - content

    # -----------------------------------------------------------
    #  Response Schemas
    # -----------------------------------------------------------
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: "인증을 위한 JWT (Bearer 토큰)"
          example: "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ0ZXN0dXNlciIsInJvbGUiOiJVU0VSIiwiZXhwIjoxNzE..."

    PostResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "게시글의 고유 ID"
          example: 1
        title:
          type: string
          description: "게시글 제목"
          example: "게시글 제목"
        content:
          type: string
          description: "게시글 내용 (HTML로 변환된 형식)"
          example: "<h2>안녕하세요</h2><p>내용입니다.</p>"
        writer:
          type: string
          description: "작성자 이름"
          example: "testuser"
        views:
          type: integer
          description: "조회수"
          example: 10
      required:
        - id
        - title
        - content
        - writer
        - views

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: "에러 메시지"
          example: "유효하지 않은 토큰입니다."

  # -----------------------------------------------------------
  #  Security Schemes
  # -----------------------------------------------------------
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "API 요청 시 'Authorization' 헤더에 'Bearer {token}' 형식으로 JWT를 포함해야 합니다."

# ===============================================================
#  Global Security
# ===============================================================
security:
  - bearerAuth: []

# ===============================================================
#  API Paths
# ===============================================================
paths:
  # -----------------------------------------------------------
  #  User API
  # -----------------------------------------------------------
  /users/register:
    post:
      tags:
        - "User"
      summary: "회원가입"
      description: "새로운 사용자를 시스템에 등록합니다."
      security: [] # 인증 불필요
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: "회원가입 성공"
          content:
            text/plain:
              schema:
                type: string
                example: "회원가입 성공"
        '400':
          description: "잘못된 요청 (예: 사용자 이름 중복)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/login:
    post:
      tags:
        - "User"
      summary: "로그인"
      description: "사용자 인증 후 JWT를 발급합니다."
      security: [] # 인증 불필요
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: "로그인 성공. JWT 토큰을 반환합니다."
          content:
            text/plain:
              schema:
                type: string
                example: "eyJhbGciOiJIUzUxMiJ9..."
        '401':
          description: "인증 실패 (아이디 또는 비밀번호 오류)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # -----------------------------------------------------------
  #  Post API
  # -----------------------------------------------------------
  /post:
    get:
      tags:
        - "Post"
      summary: "모든 게시글 조회"
      description: "시스템에 저장된 모든 게시글 목록을 조회합니다."
      security: [] # 인증 불필요
      responses:
        '200':
          description: "게시글 목록 조회 성공"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostResponse'

    post:
      tags:
        - "Post"
      summary: "새 게시글 작성"
      description: "새로운 게시글을 작성합니다. 인증된 사용자만 가능합니다."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
      responses:
        '200':
          description: "게시글 작성 성공. 생성된 게시글 정보를 반환합니다."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '401':
          description: "인증되지 않은 사용자"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /post/{id}:
    get:
      tags:
        - "Post"
      summary: "특정 게시글 조회"
      description: "ID를 사용하여 특정 게시글의 상세 정보를 조회합니다. 조회 시 조회수가 1 증가합니다."
      security: [] # 인증 불필요
      parameters:
        - name: id
          in: path
          required: true
          description: "조회할 게시글의 ID"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "게시글 조회 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '404':
          description: "해당 ID의 게시글을 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - "Post"
      summary: "게시글 수정"
      description: "ID를 사용하여 특정 게시글을 수정합니다. 작성자 또는 관리자만 가능합니다."
      parameters:
        - name: id
          in: path
          required: true
          description: "수정할 게시글의 ID"
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
      responses:
        '200':
          description: "게시글 수정 성공. 수정된 게시글 정보를 반환합니다."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '401':
          description: "인증되지 않은 사용자"
        '403':
          description: "권한 없음 (작성자 또는 관리자가 아님)"
        '404':
          description: "해당 ID의 게시글을 찾을 수 없음"

    delete:
      tags:
        - "Post"
      summary: "게시글 삭제"
      description: "ID를 사용하여 특정 게시글을 삭제합니다. 작성자 또는 관리자만 가능합니다."
      parameters:
        - name: id
          in: path
          required: true
          description: "삭제할 게시글의 ID"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "게시글 삭제 성공"
        '401':
          description: "인증되지 않은 사용자"
        '403':
          description: "권한 없음 (작성자 또는 관리자가 아님)"
        '404':
          description: "해당 ID의 게시글을 찾을 수 없음"
